{"name": "字符串断言", "status": "failed", "statusDetails": {"message": "AssertionError: ❌ 字符串与预期结果不同, 预期为 text, 实际为 success", "trace": "self = <Andrew.Common.AssertUtil.Assertions object at 0x048ECD30>, body_msg = 'success', expected_msg = 'text'\n\n    def assert_is_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 字符串相同\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert_that(body_msg, has_string(expected_msg))\n\nCommon\\AssertUtil.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'text')>, reason = ''\n\n    def assert_that(actual, matcher=None, reason=\"\"):\n        \"\"\"Asserts that actual value satisfies matcher. (Can also assert plain\n        boolean condition.)\n    \n        :param actual: The object to evaluate as the actual value.\n        :param matcher: The matcher to satisfy as the expected condition.\n        :param reason: Optional explanation to include in failure description.\n    \n        ``assert_that`` passes the actual value to the matcher for evaluation. If\n        the matcher is not satisfied, an exception is thrown describing the\n        mismatch.\n    \n        ``assert_that`` is designed to integrate well with PyUnit and other unit\n        testing frameworks. The exception raised for an unmet assertion is an\n        :py:exc:`AssertionError`, which PyUnit reports as a test failure.\n    \n        With a different set of parameters, ``assert_that`` can also verify a\n        boolean condition:\n    \n        .. function:: assert_that(assertion[, reason])\n    \n        :param assertion:  Boolean condition to verify.\n        :param reason:  Optional explanation to include in failure description.\n    \n        This is equivalent to the :py:meth:`~unittest.TestCase.assertTrue` method\n        of :py:class:`unittest.TestCase`, but offers greater flexibility in test\n        writing by being a standalone function.\n    \n        \"\"\"\n        if isinstance(matcher, Matcher):\n>           _assert_match(actual=actual, matcher=matcher, reason=reason)\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'text')>, reason = ''\n\n    def _assert_match(actual: T, matcher: Matcher[T], reason: str) -> None:\n        if not matcher.matches(actual):\n            description = StringDescription()\n            description.append_text(reason).append_text(\"\\nExpected: \").append_description_of(\n                matcher\n            ).append_text(\"\\n     but: \")\n            matcher.describe_mismatch(actual, description)\n            description.append_text(\"\\n\")\n>           raise AssertionError(description)\nE           AssertionError: \nE           Expected: an object with str 'text'\nE                but: was 'success'\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Andrew.TestCase.test_request.TestAdjuestment object at 0x04E9A748>\nargs = {'case': {'expected_code': 200, 'expected_msg': 'text', 'feature': '接口测试', 'json': None, ...}}, start = None\n\n    @pytest.mark.parametrize(\"args\",File.read_yaml(\"data.yaml\"))\n    def test_string(self, args, start):\n        feature = args[\"case\"][\"feature\"]\n        story = args[\"case\"][\"story\"]\n        title = args[\"case\"][\"title\"]\n        url = args[\"case\"][\"url\"]\n        method = args[\"case\"][\"method\"]\n        headers = {\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Access-Token\": ini._get(\"Host\", \"token\"),\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36 Edg/100.0.1185.50\",\n        }\n        json = args[\"case\"][\"json\"]\n        string = args[\"case\"][\"string\"]\n        number = args[\"case\"][\"number\"]\n        expected_msg = args[\"case\"][\"expected_msg\"]\n        allure.dynamic.feature(feature)\n        allure.dynamic.story(story)\n        allure.dynamic.title(title)\n        Requestor.request(method=method, url=url, headers=headers, json=json)\n        body = Parsing.get_value(Requestor.response, string, number)\n>       Assert.assert_is_string(body, expected_msg)\n\nTestCase\\test_request.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Andrew.Common.AssertUtil.Assertions object at 0x048ECD30>, body_msg = 'success', expected_msg = 'text'\n\n    def assert_is_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 字符串相同\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert_that(body_msg, has_string(expected_msg))\n            self.log.info(\"👀 字符串与预期结果相同\")\n            return True\n    \n        except:\n            self.log.error(\"❌ 字符串与预期结果不同, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\n>           raise AssertionError(\"❌ 字符串与预期结果不同, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\nE           AssertionError: ❌ 字符串与预期结果不同, 预期为 text, 实际为 success\n\nCommon\\AssertUtil.py:44: AssertionError"}, "parameters": [{"name": "args", "value": "{'case': {'feature': '接口测试', 'story': '调整 - 返回状态', 'title': '字符串断言', 'url': 'v1/rebate/query/availableRebateSummary?regionCode=340000&saleOrgCode=1017&firstLevelReceivingEnterpriseCode=1000009899', 'method': 'get', 'json': None, 'expected_code': 200, 'string': 'resultMsg', 'number': 0, 'expected_msg': 'text'}}"}], "start": 1652064416726, "stop": 1652064418445, "uuid": "8eaec1ff-f363-4cc5-9f23-d4e2784637ba", "historyId": "79d4504d6ae7e70ccbebe50256299174", "testCaseId": "20ebe60833089845ad3d091307c4015a", "fullName": "TestCase.test_request.TestAdjuestment#test_string", "labels": [{"name": "feature", "value": "接口测试"}, {"name": "story", "value": "调整 - 返回状态"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "TestAdjuestment"}, {"name": "host", "value": "DESKTOP-2MLCHMP"}, {"name": "thread", "value": "13308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_request"}]}