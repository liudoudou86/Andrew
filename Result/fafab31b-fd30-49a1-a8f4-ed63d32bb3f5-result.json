{"name": "test_02", "status": "failed", "statusDetails": {"message": "AssertionError: 字符串不等于预期结果, 预期为 fail, 实际为 success", "trace": "self = <Andrew.Common.AssertTool.Assertions object at 0x035E13F0>, body_msg = 'success', expected_msg = 'fail'\n\n    def assert_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert_that(body_msg, has_string(expected_msg))\n\nAndrew\\Common\\AssertTool.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'fail')>, reason = ''\n\n    def assert_that(actual, matcher=None, reason=\"\"):\n        \"\"\"Asserts that actual value satisfies matcher. (Can also assert plain\n        boolean condition.)\n    \n        :param actual: The object to evaluate as the actual value.\n        :param matcher: The matcher to satisfy as the expected condition.\n        :param reason: Optional explanation to include in failure description.\n    \n        ``assert_that`` passes the actual value to the matcher for evaluation. If\n        the matcher is not satisfied, an exception is thrown describing the\n        mismatch.\n    \n        ``assert_that`` is designed to integrate well with PyUnit and other unit\n        testing frameworks. The exception raised for an unmet assertion is an\n        :py:exc:`AssertionError`, which PyUnit reports as a test failure.\n    \n        With a different set of parameters, ``assert_that`` can also verify a\n        boolean condition:\n    \n        .. function:: assert_that(assertion[, reason])\n    \n        :param assertion:  Boolean condition to verify.\n        :param reason:  Optional explanation to include in failure description.\n    \n        This is equivalent to the :py:meth:`~unittest.TestCase.assertTrue` method\n        of :py:class:`unittest.TestCase`, but offers greater flexibility in test\n        writing by being a standalone function.\n    \n        \"\"\"\n        if isinstance(matcher, Matcher):\n>           _assert_match(actual=actual, matcher=matcher, reason=reason)\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'fail')>, reason = ''\n\n    def _assert_match(actual: T, matcher: Matcher[T], reason: str) -> None:\n        if not matcher.matches(actual):\n            description = StringDescription()\n            description.append_text(reason).append_text(\"\\nExpected: \").append_description_of(\n                matcher\n            ).append_text(\"\\n     but: \")\n            matcher.describe_mismatch(actual, description)\n            description.append_text(\"\\n\")\n>           raise AssertionError(description)\nE           AssertionError: \nE           Expected: an object with str 'fail'\nE                but: was 'success'\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Andrew.TestCase.test_01.Test01 object at 0x044FE8F0>, start = None\n\n    @allure.title(\"第二条用例\")\n    @pytest.mark.run(order=2)\n    def test_02(self, start):\n        log.info(\"第二条用例\")\n        url = 'v1/rebate/query/availableRebateSummary?regionCode=340000&saleOrgCode=1017&firstLevelReceivingEnterpriseCode=1000009899'\n        Request.get(url)\n        body = json.get_value(Request.response, \"resultMsg\", 0)\n        expected_code = \"fail\"\n>       Assert.assert_string(body, expected_code)\n\nAndrew\\TestCase\\test_01.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Andrew.Common.AssertTool.Assertions object at 0x035E13F0>, body_msg = 'success', expected_msg = 'fail'\n\n    def assert_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert_that(body_msg, has_string(expected_msg))\n            return True\n    \n        except:\n            self.log.error(\"字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\n>           raise AssertionError(\"字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\nE           AssertionError: 字符串不等于预期结果, 预期为 fail, 实际为 success\n\nAndrew\\Common\\AssertTool.py:41: AssertionError"}, "start": 1650011967445, "stop": 1650011967591, "uuid": "f3ae2733-e3ee-4457-a67d-010c405d4066", "historyId": "2eb8f0ae392e4ad5618167658c5987b6", "testCaseId": "35a7adc2dee5b0dabf300da253646d43", "fullName": "Andrew.TestCase.test_01.Test01#test_02", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "Andrew.TestCase"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Test01"}, {"name": "host", "value": "DESKTOP-2MLCHMP"}, {"name": "thread", "value": "13268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Andrew.TestCase.test_01"}]}