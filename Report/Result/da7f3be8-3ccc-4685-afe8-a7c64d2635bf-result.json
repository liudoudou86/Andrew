{"name": "test_string[args1]", "status": "failed", "statusDetails": {"message": "AssertionError: ❌ 字符串不等于预期结果, 预期为 string, 实际为 success", "trace": "self = <Common.AssertUtil.Assertions object at 0x04977A10>, body_msg = 'success', expected_msg = 'string'\n\n    def assert_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert_that(body_msg, has_string(expected_msg))\n\nCommon\\AssertUtil.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'string')>, reason = ''\n\n    def assert_that(actual, matcher=None, reason=\"\"):\n        \"\"\"Asserts that actual value satisfies matcher. (Can also assert plain\n        boolean condition.)\n    \n        :param actual: The object to evaluate as the actual value.\n        :param matcher: The matcher to satisfy as the expected condition.\n        :param reason: Optional explanation to include in failure description.\n    \n        ``assert_that`` passes the actual value to the matcher for evaluation. If\n        the matcher is not satisfied, an exception is thrown describing the\n        mismatch.\n    \n        ``assert_that`` is designed to integrate well with PyUnit and other unit\n        testing frameworks. The exception raised for an unmet assertion is an\n        :py:exc:`AssertionError`, which PyUnit reports as a test failure.\n    \n        With a different set of parameters, ``assert_that`` can also verify a\n        boolean condition:\n    \n        .. function:: assert_that(assertion[, reason])\n    \n        :param assertion:  Boolean condition to verify.\n        :param reason:  Optional explanation to include in failure description.\n    \n        This is equivalent to the :py:meth:`~unittest.TestCase.assertTrue` method\n        of :py:class:`unittest.TestCase`, but offers greater flexibility in test\n        writing by being a standalone function.\n    \n        \"\"\"\n        if isinstance(matcher, Matcher):\n>           _assert_match(actual=actual, matcher=matcher, reason=reason)\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 'success', matcher = <HasString(an object with str 'string')>, reason = ''\n\n    def _assert_match(actual: T, matcher: Matcher[T], reason: str) -> None:\n        if not matcher.matches(actual):\n            description = StringDescription()\n            description.append_text(reason).append_text(\"\\nExpected: \").append_description_of(\n                matcher\n            ).append_text(\"\\n     but: \")\n            matcher.describe_mismatch(actual, description)\n            description.append_text(\"\\n\")\n>           raise AssertionError(description)\nE           AssertionError: \nE           Expected: an object with str 'string'\nE                but: was 'success'\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Andrew.TestCase.test_request.TestRequest object at 0x04CE7050>\nargs = {'case': {'expected_code': 300, 'expected_msg': 'string', 'method': 'get', 'name': 'testcase_02', ...}}, start = None\n\n    @allure.story(\"断言字符串\")\n    @pytest.mark.parametrize(\"args\",File.read_yaml(\"data.yaml\"))\n    def test_string(self, args, start):\n        name = args[\"case\"][\"name\"]\n        url = args[\"case\"][\"url\"]\n        method = args[\"case\"][\"method\"]\n        expected_msg = args[\"case\"][\"expected_msg\"]\n        log.info(name)\n        Requestor.request(method=method, url=url)\n        body = Parsing.get_value(Requestor.response, \"resultMsg\", 0)\n>       Assert.assert_string(body, expected_msg)\n\nTestCase\\test_request.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.AssertUtil.Assertions object at 0x04977A10>, body_msg = 'success', expected_msg = 'string'\n\n    def assert_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert_that(body_msg, has_string(expected_msg))\n            self.log.info(\"👀 字符串等于预期结果\")\n            return True\n    \n        except:\n            self.log.error(\"❌ 字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\n>           raise AssertionError(\"❌ 字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\nE           AssertionError: ❌ 字符串不等于预期结果, 预期为 string, 实际为 success\n\nCommon\\AssertUtil.py:44: AssertionError"}, "parameters": [{"name": "args", "value": "{'case': {'name': 'testcase_02', 'url': 'http://10.6.3.13:28083/api/rebate/v1/rebate/query/availableRebateSummary?regionCode=340000&saleOrgCode=1017&firstLevelReceivingEnterpriseCode=1000009899', 'method': 'get', 'expected_code': 300, 'expected_msg': 'string'}}"}], "start": 1650860831257, "stop": 1650860832719, "uuid": "c4a80aaa-0761-45b0-9bfa-58255de36b4d", "historyId": "079f57a256d4325eda80f05137a60628", "testCaseId": "934c83d919c2aca1b43eabcc7f85dded", "fullName": "TestCase.test_request.TestRequest#test_string", "labels": [{"name": "story", "value": "断言字符串"}, {"name": "feature", "value": "接口测试"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "TestRequest"}, {"name": "host", "value": "DESKTOP-2MLCHMP"}, {"name": "thread", "value": "8-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_request"}]}