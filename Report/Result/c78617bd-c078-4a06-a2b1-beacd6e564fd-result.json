{"name": "test_string[args0]", "status": "failed", "statusDetails": {"message": "AssertionError: ❌ 字符串不等于预期结果, 预期为 王瑞香, 实际为 None", "trace": "self = <Common.AssertUtil.Assertions object at 0x04727A70>, body_msg = None, expected_msg = '王瑞香'\n\n    def assert_is_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert_that(body_msg, has_string(expected_msg))\n\nCommon\\AssertUtil.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = None, matcher = <HasString(an object with str '王瑞香')>, reason = ''\n\n    def assert_that(actual, matcher=None, reason=\"\"):\n        \"\"\"Asserts that actual value satisfies matcher. (Can also assert plain\n        boolean condition.)\n    \n        :param actual: The object to evaluate as the actual value.\n        :param matcher: The matcher to satisfy as the expected condition.\n        :param reason: Optional explanation to include in failure description.\n    \n        ``assert_that`` passes the actual value to the matcher for evaluation. If\n        the matcher is not satisfied, an exception is thrown describing the\n        mismatch.\n    \n        ``assert_that`` is designed to integrate well with PyUnit and other unit\n        testing frameworks. The exception raised for an unmet assertion is an\n        :py:exc:`AssertionError`, which PyUnit reports as a test failure.\n    \n        With a different set of parameters, ``assert_that`` can also verify a\n        boolean condition:\n    \n        .. function:: assert_that(assertion[, reason])\n    \n        :param assertion:  Boolean condition to verify.\n        :param reason:  Optional explanation to include in failure description.\n    \n        This is equivalent to the :py:meth:`~unittest.TestCase.assertTrue` method\n        of :py:class:`unittest.TestCase`, but offers greater flexibility in test\n        writing by being a standalone function.\n    \n        \"\"\"\n        if isinstance(matcher, Matcher):\n>           _assert_match(actual=actual, matcher=matcher, reason=reason)\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = None, matcher = <HasString(an object with str '王瑞香')>, reason = ''\n\n    def _assert_match(actual: T, matcher: Matcher[T], reason: str) -> None:\n        if not matcher.matches(actual):\n            description = StringDescription()\n            description.append_text(reason).append_text(\"\\nExpected: \").append_description_of(\n                matcher\n            ).append_text(\"\\n     but: \")\n            matcher.describe_mismatch(actual, description)\n            description.append_text(\"\\n\")\n>           raise AssertionError(description)\nE           AssertionError: \nE           Expected: an object with str '王瑞香'\nE                but: was <None>\n\nC:\\Users\\DD\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\hamcrest\\core\\assert_that.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Andrew.TestCase.test_request.TestRequest object at 0x04A9A390>\nargs = {'case': {'expected_code': 200, 'expected_msg': '王瑞香', 'headers': {'Accept': 'application/json, text/plain, */*', 'Acc...00.0.1185.50'}, 'json': {'code': None, 'instructions': None, 'operatePerson': None, 'operateTimeEnd': None, ...}, ...}}\nstart = None\n\n    @allure.story(\"断言字符串\")\n    @pytest.mark.parametrize(\"args\",File.read_yaml(\"data.yaml\"))\n    def test_string(self, args, start):\n        name = args[\"case\"][\"name\"]\n        url = args[\"case\"][\"url\"]\n        method = args[\"case\"][\"method\"]\n        headers = args[\"case\"][\"headers\"]\n        json = args[\"case\"][\"json\"]\n        string = args[\"case\"][\"string\"]\n        number = args[\"case\"][\"number\"]\n        expected_msg = args[\"case\"][\"expected_msg\"]\n        log.info(name)\n        Requestor.request(method=method, url=url, headers=headers, json=json)\n        body = Parsing.get_value(Requestor.response, string, number)\n>       Assert.assert_is_string(body, expected_msg)\n\nTestCase\\test_request.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.AssertUtil.Assertions object at 0x04727A70>, body_msg = None, expected_msg = '王瑞香'\n\n    def assert_is_string(self, body_msg, expected_msg):\n        \"\"\"\n        验证response 相等字符串\n        :param body_msg:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert_that(body_msg, has_string(expected_msg))\n            self.log.info(\"👀 字符串等于预期结果\")\n            return True\n    \n        except:\n            self.log.error(\"❌ 字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\n>           raise AssertionError(\"❌ 字符串不等于预期结果, 预期为 %s, 实际为 %s \" % (expected_msg, body_msg))\nE           AssertionError: ❌ 字符串不等于预期结果, 预期为 王瑞香, 实际为 None\n\nCommon\\AssertUtil.py:44: AssertionError"}, "parameters": [{"name": "args", "value": "{'case': {'name': 'testcase_01', 'url': 'v1/rebate/adjustment/pageByPostFilter?withDetail=true&pageSize=10&pageNum=1', 'method': 'post', 'headers': {'Accept': 'application/json, text/plain, */*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36 Edg/100.0.1185.50', 'Access-Token': 'eyJhbGciOiJIUzI1NiJ9.eyJpbnN0YW5jZUlkIjoxLCJsb2dpbk5hbWUiOiJXQU5HUlgiLCJ0ZW5hbnRJZCI6MSwiaWQiOjQ4MiwibG9naW5Tb3VyY2UiOiIwNjA3MDk3MTE3IiwianRpIjoiMjI4MTAyYWEtMDk4OS00YTgzLWFjNGUtMjNmNjRjMTRiM2Y2IiwibmJmIjoxNjUwNjA3MDk1LCJleHAiOjE2NTU3OTEwOTV9.W-MMO4bgBeXfQYTqVZl9Itenw5bkUWHu6ueX1peZzLE'}, 'json': {'code': None, 'instructions': None, 'remark': None, 'operatePerson': None, 'operateTimeStart': None, 'operateTimeEnd': None, 'status': None, 'type': 'freeze_adjustment'}, 'expected_code': 200, 'string': 'operatePerson', 'number': 0, 'expected_msg': '王瑞香'}}"}], "start": 1650878030365, "stop": 1650878030582, "uuid": "2a8a31de-0c13-4508-8374-de15903ff9a0", "historyId": "b33a168f53055d34628500d3c16d8937", "testCaseId": "934c83d919c2aca1b43eabcc7f85dded", "fullName": "TestCase.test_request.TestRequest#test_string", "labels": [{"name": "feature", "value": "接口测试"}, {"name": "story", "value": "断言字符串"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "TestRequest"}, {"name": "host", "value": "DESKTOP-2MLCHMP"}, {"name": "thread", "value": "732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_request"}]}